# 源Gitlab信息
[origin-gialab]
url = http://192.168.1.80
private_token = 5nzY4xxJtC5LBbu9ixyr

# 目标Gitlab信息
[item-gialab]
url = http://192.168.1.81
private_token = glpat-PRvG7sCkLgqcQA9ynVxS

# 迁移策略
[move-setting]
##### 日志路径 #####
log_path = gitlab_move.log

#####  重置目标Gitlab 慎用  #####
# 是否迁移前删除目标Gitlab所有项目,包含用户项目和组项目
del_all_project = false
# 是否迁移前删除所有用户除了root
del_all_user = false
# 是否迁移前删除所有组
del_all_group = false



# 是否迁移源Gitlab用户到目标Gitlab中
# 如果目标Gitlab中存在用户,就跳过创建用户
# 如果move_user=true 则必须填写新建用户的密码，而且是统一的。
# 不管源Gitlab的用户时啥类型的，只能创建一般的本地用户，不能创建ldap账户。
gitlab_move_users = false
new_user_password = 12345678

# 是否在目标Gitlab中创建组，如果目标Gitlab中没有组，迁移仓库时会报错, 所以必须创建
# 如果目标Gitlab中存在源Gitlab的组，就跳过
gitlab_move_groups = true

# 是否创建和更新目标Gitlab的用户项目
# no_user = true 代表 不创建用户的空项目 也不更新用户的项目
# no_user = false 代表 既创建用户空项目，也要更新用户项目
no_user = true

####### 新建空项目 #######
# 新建目标Gitlab空项目
# 如果目标Gitlab空项目已存在，则不创建
gitlab_move_projects = true

####### 更新目标Gitlab项目数据 #######
gitlab_all_repo_move = true
# 下载代码的存放目录
CODE_BASE_DIR = download
# 下载代码仓和推送代码仓的方式

# 如果是ssh, 则必须填写 origin_ssh_port 和 item_ssh_port
# 如果是http，则origin_ssh_port 和 item_ssh_port 不会生效
download_code_type = ssh
origin_ssh_port = 2022
item_ssh_port = 2022





